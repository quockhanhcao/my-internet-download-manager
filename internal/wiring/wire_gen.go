// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"github.com/quockhanhcao/my-internet-download-manager/internal/configs"
	"github.com/quockhanhcao/my-internet-download-manager/internal/dataacess"
	"github.com/quockhanhcao/my-internet-download-manager/internal/dataacess/cache"
	"github.com/quockhanhcao/my-internet-download-manager/internal/dataacess/database"
	"github.com/quockhanhcao/my-internet-download-manager/internal/handler"
	"github.com/quockhanhcao/my-internet-download-manager/internal/handler/grpc"
	"github.com/quockhanhcao/my-internet-download-manager/internal/logic"
	"github.com/quockhanhcao/my-internet-download-manager/internal/utils"
)

// Injectors from wire.go:

func InitializeGRPCServer(configFilePath configs.ConfigFilePath) (grpc.Server, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig := config.DatabaseConfig
	db, cleanup, err := database.InitializeDB(databaseConfig)
	if err != nil {
		return nil, nil, err
	}
	goquDatabase := database.InitializeGoquDB(db)
	logConfig := config.LogConfig
	logger, cleanup2, err := utils.InitializeLogger(logConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountDataAccessor := database.NewAccountDataAccessor(goquDatabase, logger)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(goquDatabase, logger)
	tokenPublicKeyDataAccessor := database.NewTokenPublicKeyDataAccessor(goquDatabase, logger)
	authConfig := config.AuthConfig
	hashHandler := logic.NewHashHandler(authConfig, logger)
	cacheConfig := config.CacheConfig
	client, cleanup3, err := cache.InitializeRedisClient(cacheConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cacheCache := cache.NewRedisClient(client, logger)
	tokenPublicKeyCache := cache.NewTokenPublicKeyCache(cacheCache, logger)
	tokenHandler, err := logic.NewTokenHandler(authConfig, tokenPublicKeyDataAccessor, accountDataAccessor, tokenPublicKeyCache, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accountNameCache := cache.NewAccountNameCache(cacheCache, logger)
	accountHandler := logic.NewAccountHandler(accountDataAccessor, accountPasswordDataAccessor, tokenPublicKeyDataAccessor, hashHandler, tokenHandler, goquDatabase, logger, accountNameCache)
	goLoadServiceServer := grpc.NewHandler(accountHandler)
	server := grpc.NewServer(goLoadServiceServer)
	return server, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(configs.WireSet, dataacess.WireSet, logic.WireSet, handler.WireSet, utils.WireSet)
